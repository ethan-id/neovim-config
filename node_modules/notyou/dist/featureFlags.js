// src/featureFlags.ts
var FeatureFlags = class {
  flags = /* @__PURE__ */ new Map();
  clear() {
    this.flags = /* @__PURE__ */ new Map();
  }
  getFlag(flag) {
    if (!this.flags.has(flag)) {
      throw new Error(`${flag} has not been defined`);
    }
    return this.flags.get(flag);
  }
  define(flag, options = { default: false }, users = []) {
    if (this.flags.has(flag)) {
      throw new Error(`Flag "${flag}" is already defined.`);
    }
    this.flags.set(flag, {
      state: options.default,
      users
    });
  }
  isEnabled(flagKey, userID = "") {
    if (!this.flags.has(flagKey)) {
      throw new Error(`Flag "${flagKey}" is not defined.`);
    }
    if (userID) {
      const flag2 = this.flags.get(flagKey);
      return flag2.state && flag2.users.some((user) => user.id === userID);
    }
    const flag = this.flags.get(flagKey);
    return flag.state && flag.users.length === 0;
  }
  set(flag, value) {
    if (!this.flags.has(flag)) {
      throw new Error(`Flag "${flag}" is not defined.`);
    }
    this.flags.set(flag, {
      ...this.flags.get(flag),
      state: value
    });
  }
};
var featureFlags = new FeatureFlags();
var featureFlags_default = featureFlags;
export {
  featureFlags_default as default
};
