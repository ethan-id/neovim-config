type User = {
    id: string;
    [key: string]: any;
}

type Flag = {
    state: boolean;
    users: User[];
    // TODO: Add other things to Flag (tags?)
}

// src/featureFlags.ts
class FeatureFlags {
    private flags: Map<string, Flag> = new Map();

    clear(): void {
        this.flags = new Map();
    }

    getFlag(flag: string): Flag {
        if (!this.flags.has(flag)) {
            throw new Error(`${flag} has not been defined`);
        }

        return this.flags.get(flag)!;
    }

    define(flag: string, options: {default: boolean} = {default: false}, users: User[] = []): void {
        if (this.flags.has(flag)) {
            throw new Error(`Flag "${flag}" is already defined.`);
        }

        this.flags.set(flag, {
            state: options.default,
            users
        });
    }

    isEnabled(flagKey: string, userID: string = ''): boolean {
        if (!this.flags.has(flagKey)) {
            throw new Error(`Flag "${flagKey}" is not defined.`);
        }

        // User wants to check flag for specific user
        if (userID) {
            const flag = this.flags.get(flagKey)!;
            return flag.state && flag.users.some((user) => user.id === userID);
        }

        // Else user wants to check if flag is enabled for all users 
        // (flag.users === [] means state applies to all users)
        const flag = this.flags.get(flagKey)!;
        return flag.state! && flag.users.length === 0;
    }

    set(flag: string, value: boolean): void {
        if (!this.flags.has(flag)) {
            throw new Error(`Flag "${flag}" is not defined.`);
        }

        this.flags.set(flag, {
            ...this.flags.get(flag)!,
            state: value
        });
    }
}

const featureFlags = new FeatureFlags();

export default featureFlags;
